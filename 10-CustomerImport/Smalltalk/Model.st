Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!!Customer class methodsFor: 'importing' stamp: 'SebastianTaboh 11/6/2017 20:07'!importCustomers	"	self importCustomers	"	test importCustomers! !TestCase subclass: #CustomerImporterTest	instanceVariableNames: 'session inputStream'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/6/2017 21:51'!setUp	"Extraer esto a testData (hasta donde se asigna a session"	inputStream := ReadStream on:		'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'.		session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/6/2017 21:51'!importCustomers	"Mover a la clase encargada de importar, customerImporter. Para esto hago un move, para eso tengo que inicializar un objeto en el setUp que se llame customerImporter (como variable de instancia)."	"El test tiene que pasarle a importCustomer la session y el inputStream (importCustomers:from:)"	"customerImporter importTo: aSession from: anInputStream"	"No está bien que el test implemente customerIdentifiedAs: ofType:, sabe buscar clientes en la base de datos, huele feo -> falta abstracción, pero esto lo dejamos pendiente.	Además, sabe cómo tiene que mapear las cosas en la base de datos :("		"	self importCustomers	"	| newCustomer line |	line := inputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					session persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := inputStream nextLine ].	inputStream close! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/6/2017 20:13'!tearDown	session commit.	session close! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/6/2017 21:42'!test01ImportCustomersMapsCustomersCorrectly"Extraer tests en metodos para darles semantica""Cantidad de clientes importados, Pepe Sanchez importado correctamente, Juan Perez importado correctamente""Customers no sirve para nada"	| customers customer |		self importCustomers.	customers := session selectAllOfType: Customer.		self assert: customers size equals: 2.		"Desde acá hasta los asserts va a ser código repetido para los distintos clientes importados"	"CustomerIdentifiedAs: idNumber ofType: idType"	customers := session		select: [ :c | 			c identificationType = 'D'				and: [ c identificationNumber = '22333444' "idNumber" ] ]		ofType: Customer.	customer := customers anyOne.	"Assertá cliente así"	self assert: customer firstName equals: 'Pepe'.	self assert: customer lastName equals: 'Sanchez'.	self assert: customer identificationType equals: 'D'.	self assert: customer identificationNumber equals: '22333444'.	"Crear un customer addressAt: aStreetName para evitar romper encapsulamiento"	self assert: customer addresses size equals: 2! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/6/2017 21:18'!test03	| addresses customer customers |		self importCustomers.	addresses := session selectAllOfType: Address.	customers := session selectAllOfType: Customer.		customer := (session		select: [ :c | 			c identificationType = 'D'				and: [ c identificationNumber = '22333444' ] ]		ofType: Customer) anyOne.			self assert: (addresses includesAll: (customer addresses)).	addresses removeAll: customer addresses.		customer := (session		select: [ :c | 			c identificationType = 'C'				and: [ c identificationNumber = '23-25666777-9' ] ]		ofType: Customer) anyOne.		self assert: (addresses includesAll: (customer addresses)).		addresses removeAll: customer addresses.		self assert: addresses isEmpty! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/6/2017 21:00'!test02	| addresses address |		self importCustomers.	addresses := session selectAllOfType: Address.		self assert: addresses size equals: 3.		addresses := session		select: [ :a | 			a streetName = 'San Martin'				and: [ a streetNumber = 3322 ] ]		ofType: Address.	address := addresses anyOne.	self assert: address streetName equals: 'San Martin'.	self assert: address streetNumber equals: 3322.	self assert: address town equals: 'Olivos'.	self assert: address zipCode equals: 1636.	self assert: address province equals: 'BsAs'! !