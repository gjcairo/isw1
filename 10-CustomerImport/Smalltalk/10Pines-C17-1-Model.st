Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'SebastianTaboh 11/9/2017 20:33'!initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTownName.	zipCode := aZipCode.	province := aProvinceName ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'instance creation' stamp: 'SebastianTaboh 11/9/2017 20:32'!newWithStreetName: aStreetName streetNumber: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName	^ self new initializeWithStreetName: aStreetName streetNumber: aStreetNumber town: aTownName zipCode: aZipCode province: aProvinceName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'SebastianTaboh 11/9/2017 20:40'!initializeWithFirstName: aFirstName lastName: aLastName idType: anIdType idNumber: anIdNumber		super initialize.	addresses := OrderedCollection new.	firstName := aFirstName.	lastName := aLastName.	identificationNumber := anIdNumber.	identificationType := anIdType ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'SebastianTaboh 11/13/2017 19:19'!addressesIsEmpty	^ addresses isEmpty ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'GustavoJuanCairo 11/8/2017 00:25'!addressAt: aStreetName at: aStreetNumber	^ self addresses 		detect: [ :address | address streetName = aStreetName and: [ address streetNumber = aStreetNumber ] ] 		ifNone: [ self error: self invalidAddressErrorMessage ].! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'GustavoJuanCairo 11/8/2017 00:25'!invalidAddressErrorMessage	^ 'La direccion no pertenece al cliente'! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!!Customer class methodsFor: 'importing' stamp: 'SebastianTaboh 11/6/2017 20:07'!importCustomers	"	self importCustomers	"	test importCustomers! !!Customer class methodsFor: 'importing' stamp: 'SebastianTaboh 11/9/2017 20:38'!newWithFirstName: aFirstName lastName: aLastName idType: anIdType idNumber: anIdNumber	^ self new initializeWithFirstName: aFirstName lastName: aLastName idType: anIdType idNumber: anIdNumber! !Object subclass: #CustomerImporter	instanceVariableNames: 'line inputStream lastProcessedCustomer record system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 19:02'!createRecordFromLine	line := inputStream nextLine.	record := line substrings: {$,}! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 19:08'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:14'!parseRecord	self isCustomerRecord		ifTrue: [ ^ self parseCustomer ].	self isAddressRecord		ifTrue: [ ^ self parseAddress ].	self error: self invalidRecordDescriptorErrorMessage	! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/9/2017 20:15'!processLine	self createRecordFromLine.	self parseRecord! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 19:02'!hasLineToProcess	^ inputStream atEnd not! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:46'!parseCustomer	lastProcessedCustomer := self createCustomerFromRecord.	system persist: lastProcessedCustomer! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:25'!parseAddress	lastProcessedCustomer ifNil: [ self error: self addressWithoutCustomerErrorMessage ].	lastProcessedCustomer addAddress: self createAddressFromRecord! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:48'!initializeImportingFrom: anInputStream on: aSystem	inputStream := anInputStream.	system := aSystem! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:21'!invalidAddressRecordErrorMessage	^ 'El registro de dirección tiene una cantidad incorrecta de campos'! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:25'!createAddressFromRecord	(record size = 6) ifFalse: [ self error: self invalidAddressRecordErrorMessage ].		^ Address		newWithStreetName: record second		streetNumber: record third asInteger		town: record fourth		zipCode: record fifth asInteger		province: record sixth! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 22:57'!addressWithoutCustomerErrorMessage	^ 'La primer linea del input stream debe ser un cliente, no una direccion'! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 19:08'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 19:30'!value	[ self hasLineToProcess ] whileTrue:		[ self processLine ]! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:21'!invalidCustomerRecordErrorMessage	^ 'El registro de cliente tiene una cantidad incorrecta de campos'! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:25'!createCustomerFromRecord	(record size = 5) ifFalse: [ self error: self invalidCustomerRecordErrorMessage ].		^ Customer		newWithFirstName: record second		lastName: record third		idType: record fourth		idNumber: record fifth! !!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:08'!invalidRecordDescriptorErrorMessage	^ 'El descriptor de registro es inexistente: los únicos válidos son A para direcciones y C para clientes'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'SebastianTaboh 11/13/2017 20:46'!importingFrom: inputStream on: aSystem	^ self new initializeImportingFrom: inputStream on: aSystem! !TestCase subclass: #CustomerImporterTest	instanceVariableNames: 'inputStream customerImporter system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/12/2017 23:10'!assertCustomersNotImported	self assert: (self numberOfCustomers) equals: 0! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test03ImportingCustomersFromFileWithNonexistentSingleCharacterLineDescriptorFails	inputStream := ReadStream		on: self invalidTestDataNonexistentLineDescriptor.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidRecordDescriptorErrorMessage.			self assertCustomersNotImported ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test08CannotImportAddressRecordWithLessThanSixFields	inputStream := ReadStream		on: self invalidTestDataAddressRecordWithLessThanSixFields.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidAddressRecordErrorMessage.			self assert: self numberOfCustomers equals: 1.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test06CannotImportCustomerRecordWithLessThanFiveFields	inputStream := ReadStream		on: self invalidTestDataCustomerRecordWithLessThanFiveFields.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidCustomerRecordErrorMessage.			self assertCustomersNotImported ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test07CannotImportCustomerRecordWithMoreThanFiveFields	inputStream := ReadStream		on: self invalidTestDataCustomerRecordWithMoreThanFiveFields.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidCustomerRecordErrorMessage.			self assertCustomersNotImported ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 20:43'!assertPepeSanchezImportedCorrectly	| customer idNumber idType anAddress |	idType := 'D'.	idNumber := '22333444'.	customer := system customerIdentifiedAs: idNumber ofType: idType.	self assert: customer firstName equals: 'Pepe'.	self assert: customer lastName equals: 'Sanchez'.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	anAddress := customer addressAt: 'San Martin' at: 3322.	self assert: anAddress streetName equals: 'San Martin'.	self assert: anAddress streetNumber equals: 3322.	self assert: anAddress town equals: 'Olivos'.	self assert: anAddress zipCode equals: 1636.	self assert: anAddress province equals: 'BsAs'.	anAddress := customer addressAt: 'Maipu' at: 888.	self assert: anAddress streetName equals: 'Maipu'.	self assert: anAddress streetNumber equals: 888.	self assert: anAddress town equals: 'Florida'.	self assert: anAddress zipCode equals: 1122.	self assert: anAddress province equals: 'Buenos Aires'! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test02ImportingCustomersFromFileWithoutCustomerOnFirstLineFails	inputStream := ReadStream		on: self invalidTestDataNoCustomerOnFirstLine.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter addressWithoutCustomerErrorMessage.			self assertCustomersNotImported ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test01ImportCustomersMapsCustomersCorrectly	inputStream := ReadStream on: self validTestData.	self importCustomersFrom: inputStream.	self assert: self numberOfCustomers equals: 2.	self assertPepeSanchezImportedCorrectly.	self assertJuanPerezImportedCorrectly! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 20:41'!alwaysImportedCustomer	^ system allCustomers first! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test04ImportingCustomersFromFileWithCLineDescriptorWithMoreCharactersFails	inputStream := ReadStream		on: self invalidTestDataDescriptorCFollowedByMoreLetters.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidRecordDescriptorErrorMessage.			self assertCustomersNotImported ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test9CannotImportAddressRecordWithMoreThanSixFields	inputStream := ReadStream		on: self invalidTestDataAddressRecordWithMoreThanSixFields.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidAddressRecordErrorMessage.			self assert: self numberOfCustomers equals: 1.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 20:43'!assertJuanPerezImportedCorrectly	| customer idType idNumber anAddress |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerIdentifiedAs: idNumber ofType: idType.	self assert: customer firstName equals: 'Juan'.	self assert: customer lastName equals: 'Perez'.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	anAddress := customer addressAt: 'Alem' at: 1122.	self assert: anAddress streetName equals: 'Alem'.	self assert: anAddress streetNumber equals: 1122.	self assert: anAddress town equals: 'CABA'.	self assert: anAddress zipCode equals: 1001.	self assert: anAddress province equals: 'CABA'! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 19:26'!test05ImportingCustomersFromFileWithALineDescriptorWithMoreCharactersFails	inputStream := ReadStream		on: self invalidTestDataDescriptorAFollowedByMoreLetters.	self		should: [ self importCustomersFrom: inputStream ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anException | 			anException messageText				= customerImporter invalidRecordDescriptorErrorMessage.			self assert: self numberOfCustomers equals: 1.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImporterTest methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 20:41'!numberOfCustomers	^ system allCustomers size! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:04'!invalidTestDataDescriptorAFollowedByMoreLetters	^ 'C,Pepe,Sanchez,D,22333444AA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/9/2017 20:52'!invalidTestDataNoCustomerOnFirstLine	^ 'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:04'!invalidTestDataDescriptorCFollowedByMoreLetters	^ 'CC,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/9/2017 20:50'!validTestData	^ 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:45'!importCustomersFrom: anInputStream	customerImporter := CustomerImporter		importingFrom: anInputStream		on: system.	customerImporter value.	inputStream close! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:08'!invalidTestDataAddressRecordWithMoreThanSixFields	^ 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,BlaA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 21:34'!setUp	system := Environment current createCustomerSystem.	system startUp! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:08'!invalidTestDataCustomerRecordWithLessThanFiveFields	^ 'C,Pepe,Sanchez,DA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:08'!invalidTestDataAddressRecordWithLessThanSixFields	^ 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636A,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:38'!tearDown	system shutDown! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:09'!invalidTestDataCustomerRecordWithMoreThanFiveFields	^ 'C,Pepe,Sanchez,D,22333444,BlaA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/12/2017 23:15'!invalidTestDataNonexistentLineDescriptor	^ 'J,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerSystem methodsFor: 'persistance' stamp: 'SebastianTaboh 11/13/2017 21:12'!customerIdentifiedAs: idNumber ofType: idType 	self subclassResponsibility ! !!CustomerSystem methodsFor: 'persistance' stamp: 'SebastianTaboh 11/13/2017 21:12'!startUp	self subclassResponsibility ! !!CustomerSystem methodsFor: 'persistance' stamp: 'SebastianTaboh 11/13/2017 21:12'!shutDown	self subclassResponsibility ! !!CustomerSystem methodsFor: 'persistance' stamp: 'SebastianTaboh 11/13/2017 20:59'!persist: aCustomer	self subclassResponsibility ! !!CustomerSystem methodsFor: 'persistance' stamp: 'SebastianTaboh 11/13/2017 21:11'!allCustomers	self subclassResponsibility ! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'SebastianTaboh 11/13/2017 21:20'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'SebastianTaboh 11/13/2017 21:45'!current	^ self allSubclasses		detect: [ :aSubclass | aSubclass isCurrent ]		ifFound: [ :aSubclass | aSubclass new ]		ifNone: [ self error: self noCurrentEnvironmentErrorMessage ]		! !!Environment class methodsFor: 'accessing' stamp: 'SebastianTaboh 11/13/2017 21:38'!noCurrentEnvironmentErrorMessage	^ 'No hay un entorno vigente actualmente'! !!Environment class methodsFor: 'testing' stamp: 'SebastianTaboh 11/13/2017 21:46'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'SebastianTaboh 11/13/2017 21:43'!createCustomerSystem	^ TransientCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'SebastianTaboh 11/13/2017 21:43'!isCurrent	^ true! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'SebastianTaboh 11/13/2017 21:43'!createCustomerSystem	^ PersistentCustomerSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'SebastianTaboh 11/13/2017 21:43'!isCurrent	^ false! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!PersistentCustomerSystem methodsFor: 'accessing' stamp: 'SebastianTaboh 11/13/2017 20:20'!session	^ session! !!PersistentCustomerSystem methodsFor: 'accessing' stamp: 'SebastianTaboh 11/13/2017 20:20'!session: anObject	session := anObject! !!PersistentCustomerSystem methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 20:40'!allCustomers	^ self session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'tests' stamp: 'SebastianTaboh 11/13/2017 20:43'!customerIdentifiedAs: idNumber ofType: idType	^ (self session		select: [ :c | 			c identificationType = idType				and: [ c identificationNumber = idNumber ] ]		ofType: Customer) anyOne! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:18'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:17'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:37'!startUp	self session open.	self session beginTransaction! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:38'!shutDown	self session commit.	self session close! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:28'!initializeSession	self		session:			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping))! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:59'!persist: aCustomer	session persist: aCustomer ! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'SebastianTaboh 11/13/2017 20:29'!initialize	super initialize.	self initializeSession ! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!TransientCustomerSystem methodsFor: 'Accessing' stamp: 'SebastianTaboh 11/13/2017 21:08'!customerIdentifiedAs: idNumber ofType: idType 		^ customers detect: [ :aCustomer |		aCustomer identificationNumber = idNumber 		and: [ aCustomer identificationType = idType ] ]! !!TransientCustomerSystem methodsFor: 'connection open/close' stamp: 'SebastianTaboh 11/13/2017 21:10'!shutDown	! !!TransientCustomerSystem methodsFor: 'instance initialization' stamp: 'SebastianTaboh 11/13/2017 21:05'!initialize	super initialize.	customers := OrderedCollection new! !!TransientCustomerSystem methodsFor: 'instance initialization' stamp: 'SebastianTaboh 11/13/2017 21:05'!persist: aCustomer	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'instance initialization' stamp: 'SebastianTaboh 11/13/2017 21:04'!startUp	! !!TransientCustomerSystem methodsFor: 'accessing' stamp: 'SebastianTaboh 11/13/2017 21:05'!allCustomers		^ customers copy ! !