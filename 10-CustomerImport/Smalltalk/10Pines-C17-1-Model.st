Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'identification' stamp: 'GustavoJuanCairo 11/8/2017 00:25'!invalidAddressErrorMessage	^ 'La direccion no pertenece al cliente'! !!Customer methodsFor: 'identification' stamp: 'GustavoJuanCairo 11/8/2017 00:25'!addressAt: aStreetName at: aStreetNumber	^ self addresses 		detect: [ :address | address streetName = aStreetName and: [ address streetNumber = aStreetNumber ] ] 		ifNone: [ self error: self invalidAddressErrorMessage ].! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!Object subclass: #CustomerImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporter methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/8/2017 01:04'!importTo: aSession from: anInputStream	"Mover a la clase encargada de importar, customerImporter. Para esto hago un move, para eso tengo que inicializar un objeto en el setUp que se llame customerImporter (como variable de instancia)."	"El test tiene que pasarle a importCustomer la session y el inputStream (importCustomers:from:)"	"customerImporter importTo: aSession from: anInputStream"		| newCustomer line |	line := anInputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fifth.					aSession persist: newCustomer ].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress ].			line := anInputStream nextLine ].	anInputStream close! !TestCase subclass: #CustomerImporterTest	instanceVariableNames: 'session inputStream customerImporter'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporterTest methodsFor: 'importing' stamp: 'SebastianTaboh 11/6/2017 20:13'!tearDown	session commit.	session close! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/8/2017 00:44'!customerTestData	^ 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/8/2017 00:47'!setUp	customerImporter := CustomerImporter new.	inputStream := ReadStream on: self customerTestData.	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTest methodsFor: 'importing' stamp: 'GustavoJuanCairo 11/8/2017 01:04'!importCustomersTo: aSession from: anInputStream	customerImporter importTo: aSession from: anInputStream! !!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/8/2017 00:16'!customerIdentifiedAs: idNumber ofType: idType	^ (session		select: [ :c | 			c identificationType = idType				and: [ c identificationNumber = idNumber ] ]		ofType: Customer) anyOne! !!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/7/2017 23:57'!assertCorrectNumberOfImportedCustomers	| customers |	customers := session selectAllOfType: Customer.	self assert: customers size equals: 2.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/8/2017 00:33'!assertPepeSanchezImportedCorrectly	| customer idNumber idType anAddress |		idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idNumber ofType: idType.		self assert: customer firstName equals: 'Pepe'.	self assert: customer lastName equals: 'Sanchez'.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.		anAddress := customer addressAt: 'San Martin' at: 3322.	self assert: anAddress streetName equals: 'San Martin'.	self assert: anAddress streetNumber equals: 3322.	self assert: anAddress town equals: 'Olivos'.	self assert: anAddress zipCode equals: 1636.	self assert: anAddress province equals: 'BsAs'.		anAddress := customer addressAt: 'Maipu' at: 888.	self assert: anAddress streetName equals: 'Maipu'.	self assert: anAddress streetNumber equals: 888.	self assert: anAddress town equals: 'Florida'.	self assert: anAddress zipCode equals: 1122.	self assert: anAddress province equals: 'Buenos Aires'! !!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/8/2017 00:36'!assertJuanPerezImportedCorrectly	| customer idType idNumber anAddress |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idNumber ofType: idType.		self assert: customer firstName equals: 'Juan'.	self assert: customer lastName equals: 'Perez'.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	anAddress := customer addressAt: 'Alem' at: 1122.	self assert: anAddress streetName equals: 'Alem'.	self assert: anAddress streetNumber equals: 1122.	self assert: anAddress town equals: 'CABA'.	self assert: anAddress zipCode equals: 1001.	self assert: anAddress province equals: 'CABA'.	! !!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/8/2017 01:03'!test01ImportCustomersMapsCustomersCorrectly	self importCustomersTo: session from: inputStream.	self assertCorrectNumberOfImportedCustomers.	self assertPepeSanchezImportedCorrectly.	self assertJuanPerezImportedCorrectly! !!CustomerImporterTest methodsFor: 'tests' stamp: 'GustavoJuanCairo 11/8/2017 01:03'!test02ImportCustomersMapsAddressesCorrectly	| addresses address |	self importCustomersTo: session from: inputStream.	addresses := session selectAllOfType: Address.	self assert: addresses size equals: 3.	addresses := session		select: [ :a | a streetName = 'San Martin' and: [ a streetNumber = 3322 ] ]		ofType: Address.	address := addresses anyOne.	self assert: address streetName equals: 'San Martin'.	self assert: address streetNumber equals: 3322.	self assert: address town equals: 'Olivos'.	self assert: address zipCode equals: 1636.	self assert: address province equals: 'BsAs'! !